---
import { Aside, Code } from '@astrojs/starlight/components';
import { getEntry } from 'astro:content';
const { name } = Astro.props;

const command = await getEntry('commands', name);

const data = command?.data;

const usage = data?.usage;
---

<!-- const commands = defineCollection({ -->
<!-- 	loader: glob({ pattern: "**/*.yml", base: "src/data/commands" }), -->
<!-- 	schema: z.object({ -->
<!-- 		name: z.string(), -->
<!-- 		usage: z.string(), -->
<!-- 		examples: z.array(z.string()).optional(), -->
<!-- 		subcommands: z.array(z.object({ -->
<!-- 			name: z.string(), -->
<!-- 			description: z.string(), -->
<!-- 		}).optional()), -->
<!-- 		flags: z.array(z.object({ -->
<!-- 			name: z.string(), -->
<!-- 			description: z.string(), -->
<!-- 			env: z.array(z.string()), -->
<!-- 		}).optional()), -->
<!-- 		experiment: z.object({ -->
<!-- 			control: z.string(), -->
<!-- 			name: z.string(), -->
<!-- 		}).optional(), -->
<!-- 	}), -->
<!-- }); -->

{
  data?.experiment ? (
    <Aside type="tip" title={data?.experiment?.name}>
      The <code dir="auto">{name}</code> command is experimental, usage requires the <a href="/docs/reference/experiments/#${data?.experiment?.control}"><code dir="auto">--experiment {data?.experiment?.control}</code></a> flag.
    </Aside>
  ) : null
}

{
  usage?.split('\n').map((line) => (
    <p>{line}</p>
  ))
}

{
  data?.examples ? (
  <h2>Examples</h2>
  <div>
    {data?.examples.map((example) => (
      example && (
        <p>{example?.description}</p>
        <Code code={example?.code} lang="bash" />
      )
    ))}
  </div>
  ) : null
}


<!-- Run the provided OpenTofu/Terraform command against the unit in the current working directory. -->

<!-- ## Usage -->

<!-- ```bash -->
<!-- terragrunt run plan -->
<!-- ``` -->

<!-- Note that the `run` command is a more explicit way to run OpenTofu/Terraform commands, and it provides some flexible options that are not available with [OpenTofu shortcuts](/docs/reference/cli/commands/opentofu-shortcuts). -->

<!-- The `run` command also supports the following flags that can be used to drive runs in multiple units: -->

<!-- - [`--all`](#all): Run the provided OpenTofu/Terraform command against all units in the current stack. -->
<!-- - [`--graph`](#graph): Run the provided OpenTofu/Terraform command against the graph of dependencies for the unit in the current working directory. -->

<!-- ## Separating Arguments -->

<!-- You may, at times, need to explicitly separate the arguments used for Terragrunt from those used for OpenTofu/Terraform. In those circumstances, you can use the argument `--` to separate the Terragrunt flags from the OpenTofu/Terraform flags. -->

<!-- ```bash -->
<!-- terragrunt run -- plan -no-color -->
<!-- ``` -->
