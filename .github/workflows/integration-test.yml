name: Integration Tests

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  test:
    name: Test (${{ matrix.integration.name }})
    runs-on: ${{ matrix.integration.os }}-latest
    env:
      MISE_PROFILE: cicd
    strategy:
      fail-fast: false
      matrix:
        integration:
          - name: Fixtures
            os: ubuntu
            target: ./test
          - name: SSH
            os: ubuntu
            target: ./...
            tags: ssh
            run: '^TestSSH'
            requires_setup: true
            setup_script: .github/scripts/setup/ssh.sh
          - name: SOPS
            os: ubuntu
            target: ./...
            tags: sops
            run: '^TestSOPS'
            requires_setup: true
            setup_script: .github/scripts/setup/sops.sh
            secrets: []
          - name: Tflint
            os: ubuntu
            target: ./...
            tags: tflint
            run: '^TestTflint'
            requires_setup: true
            setup_script: .github/scripts/setup/tflint.sh
            secrets: [AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY]
          - name: GCP
            os: ubuntu
            target: ./...
            tags: gcp
            run: '^TestGcp'
            requires_setup: true
            setup_script: .github/scripts/setup/gcp.sh
            secrets: [GCLOUD_SERVICE_KEY, GOOGLE_CLOUD_PROJECT, GOOGLE_COMPUTE_ZONE, GOOGLE_IDENTITY_EMAIL, GOOGLE_PROJECT_ID]
          - name: AWS
            os: ubuntu
            target: ./...
            tags: aws
            run: '^TestAws'
            requires_setup: true
            setup_script: .github/scripts/setup/aws.sh
            secrets: [AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY]
          - name: AWSGCP
            os: ubuntu
            target: ./...
            tags: awsgcp
            run: '^TestAwsGcp'
            requires_setup: true
            setup_script: .github/scripts/setup/awsgcp.sh
            secrets: [AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, GCLOUD_SERVICE_KEY, GOOGLE_CLOUD_PROJECT, GOOGLE_COMPUTE_ZONE, GOOGLE_IDENTITY_EMAIL, GOOGLE_PROJECT_ID]
          - name: Engine
            os: ubuntu
            target: ./...
            tags: engine
            run: '^TestEngine'
            requires_setup: true
            setup_script: .github/scripts/setup/engine.sh
            secrets: []

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate Secrets Environment
        if: ${{ matrix.integration.requires_setup }}
        id: generate-secrets
        run: |
          ENV_FILE="${GITHUB_WORKSPACE}/.env.secrets"
          echo "export SCRIPT_PATH='${{ matrix.integration.setup_script }}'" > $ENV_FILE
          
          for SECRET in ${{ join(matrix.integration.secrets, ' ') }}; do
            if [ "$SECRET" = "SSH_KEY" ]; then
              printf "export SSH_KEY='%s'\n" "${{ secrets.SSH_KEY }}" >> $ENV_FILE
            elif [ "$SECRET" = "GCLOUD_SERVICE_KEY" ]; then
              printf "export GCLOUD_SERVICE_KEY='%s'\n" "${{ secrets.GCLOUD_SERVICE_KEY }}" >> $ENV_FILE
            elif [ "$SECRET" = "GOOGLE_CLOUD_PROJECT" ]; then
              printf "export GOOGLE_CLOUD_PROJECT='%s'\n" "${{ secrets.GOOGLE_CLOUD_PROJECT }}" >> $ENV_FILE
            elif [ "$SECRET" = "GOOGLE_COMPUTE_ZONE" ]; then
              printf "export GOOGLE_COMPUTE_ZONE='%s'\n" "${{ secrets.GOOGLE_COMPUTE_ZONE }}" >> $ENV_FILE
            elif [ "$SECRET" = "GOOGLE_IDENTITY_EMAIL" ]; then
              printf "export GOOGLE_IDENTITY_EMAIL='%s'\n" "${{ secrets.GOOGLE_IDENTITY_EMAIL }}" >> $ENV_FILE
            elif [ "$SECRET" = "GOOGLE_PROJECT_ID" ]; then
              printf "export GOOGLE_PROJECT_ID='%s'\n" "${{ secrets.GOOGLE_PROJECT_ID }}" >> $ENV_FILE
            elif [ "$SECRET" = "AWS_ACCESS_KEY_ID" ]; then
              printf "export AWS_ACCESS_KEY_ID='%s'\n" "${{ secrets.AWS_ACCESS_KEY_ID }}" >> $ENV_FILE
            elif [ "$SECRET" = "AWS_SECRET_ACCESS_KEY" ]; then
              printf "export AWS_SECRET_ACCESS_KEY='%s'\n" "${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $ENV_FILE
            fi
          done
          
          echo "Created environment file with secrets for ${{ matrix.integration.name }}"
        shell: bash

      - name: Setup
        if: ${{ matrix.integration.requires_setup }}
        run: |
          # Source the environment file and run setup script
          source "${GITHUB_WORKSPACE}/.env.secrets"
          chmod +x "${SCRIPT_PATH}"
          "${SCRIPT_PATH}"
        shell: bash

      - name: Use mise to install dependencies
        uses: jdx/mise-action@v2
        with:
          version: 2025.4.4
          experimental: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - id: go-cache-paths
        run: |
          echo "go-build=$(go env GOCACHE)" >> "$GITHUB_OUTPUT"
        shell: bash

      - name: Go Build Cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.go-cache-paths.outputs.go-build }}
          key: ${{ runner.os }}-go-integration-test-${{ matrix.integration.name }}-${{ hashFiles('**/go.sum') }}

      - name: Run Tests
        run: |
          go test -v ${TAGS:+-tags "$TAGS"} ${RUN:+-run "$RUN"} "${TARGET}"
        shell: bash
        env:
          GITHUB_OAUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TARGET: ${{ matrix.integration.target }}
          TAGS: ${{ matrix.integration.tags }}
          RUN: ${{ matrix.integration.run }}
