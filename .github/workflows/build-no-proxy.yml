name: Build Without Go Proxy

on:
  push:

jobs:
  build-no-proxy:
    name: Build (${{ matrix.os }}/${{ matrix.arch }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - os: darwin
            arch: amd64
          - os: darwin
            arch: arm64
          - os: linux
            arch: "386"
          - os: linux
            arch: amd64
          - os: linux
            arch: arm64
          - os: windows
            arch: "386"
          - os: windows
            arch: amd64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use mise to install dependencies
        uses: jdx/mise-action@v2
        with:
          version: 2025.4.4
          experimental: true
        env:
          # Adding token here to reduce the likelihood of hitting rate limit issues.
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - id: go-cache-paths
        run: |
          echo "go-build=$(go env GOCACHE)" >> "$GITHUB_OUTPUT"

      - name: Clean Go build cache
        run: |
          echo "Cleaning Go cache..."
          go clean -modcache
          rm -rf $(go env GOCACHE)

      - name: Set Go environment variables to bypass proxy
        run: |
          echo "Setting GOPROXY to direct and GOSUMDB to off"
          echo "GOPROXY=direct" >> $GITHUB_ENV
          echo "GOSUMDB=off" >> $GITHUB_ENV

      - name: Setup SSH for Git
        run: |
          # Add SSH private key to SSH agent
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

          # Add GitHub's SSH key to known hosts
          ssh-keyscan github.com >> ~/.ssh/known_hosts

      - name: Build Terragrunt without Go proxy
        env:
          GOPROXY: direct
          GOSUMDB: off
          GOOS: ${{ matrix.os }}
          GOARCH: ${{ matrix.arch }}
          GIT_SSH_COMMAND: "ssh -i ~/.ssh/id_rsa -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"
        run: |
          OUTPUT="bin/terragrunt-${GOOS}-${GOARCH}"
          if [ "${GOOS}" = "windows" ]; then
            OUTPUT="${OUTPUT}.exe"
          fi
          go build -o "${OUTPUT}" \
            -ldflags "-X github.com/gruntwork-io/go-commons/version.Version=${GITHUB_REF_NAME} -extldflags '-static'" \
            .
